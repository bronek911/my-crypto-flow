[{"/srv/my-crypto-flow/src/reportWebVitals.js":"1","/srv/my-crypto-flow/src/App.js":"2","/srv/my-crypto-flow/src/components/AddForm/AddForm.js":"3","/srv/my-crypto-flow/src/index.js":"4","/srv/my-crypto-flow/src/components/CurrencyList/CurrencyList.js":"5","/srv/my-crypto-flow/src/dataProviders/CoinGeko.js":"6"},{"size":362,"mtime":1606768558396,"results":"7","hashOfConfig":"8"},{"size":4166,"mtime":1608242805479,"results":"9","hashOfConfig":"8"},{"size":2306,"mtime":1608238587602,"results":"10","hashOfConfig":"8"},{"size":225,"mtime":1606769629159,"results":"11","hashOfConfig":"8"},{"size":4450,"mtime":1608242538299,"results":"12","hashOfConfig":"8"},{"size":2160,"mtime":1608240378565,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bvdwfu",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"/srv/my-crypto-flow/src/reportWebVitals.js",[],"/srv/my-crypto-flow/src/App.js",["31"],"import React, { useState } from 'react';\n\nimport CoinGeko from './dataProviders/CoinGeko';\nimport AddForm from './components/AddForm/AddForm';\nimport CurrencyList from './components/CurrencyList/CurrencyList';\n\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\n\nimport './App.css';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            items: [],\n            coins: [],\n            rates: {\n                usd: 0\n            }\n        }\n        \n        CoinGeko.getCurrencies().then((res) => {\n            this.setState({coins: res})\n        });\n\n        this.handleAddRecord = this.handleAddRecord.bind(this);\n        this.updateFile = this.updateFile.bind(this);        \n    }\n\n    componentDidMount(){\n        this.getData()\n        this.getNbpRates()\n    }\n\n    render() {\n        return (\n            <Container className=\"p-3\">\n\n                <Accordion>\n                    <Card>\n                        <Card.Header>\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                                Dodaj zakup\n                            </Accordion.Toggle>\n                        </Card.Header>\n                            <Accordion.Collapse eventKey=\"0\">\n                            <Jumbotron>\n                                <AddForm coins={this.state.coins} handleAddRecord={this.handleAddRecord}/>\n                            </Jumbotron>\n                        </Accordion.Collapse>\n                    </Card>\n                </Accordion>\n\n                <br></br>\n\n                <CurrencyList items={this.state.items} rates={this.state.rates} />\n\n            </Container>\n        );\n    }\n\n    handleAddRecord(event){\n        event.preventDefault();\n        const amount = parseFloat(event.target[0].value);\n        const currency = event.target[1].value;\n        if(amount != null && currency != null){\n            this.updateFile({amount: amount, currency_id: currency})\n        }\n    }\n\n    updateFile(data){\n        console.log(JSON.stringify(data));\n        fetch('http://localhost/startowa/api/web/v1/mcf/add', {\n            method: 'POST',\n            body: JSON.stringify(data),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(response => {\n            console.log(response);\n            if (response.status >= 200 && response.status < 300) {\n                this.getData()\n                return true;\n            } else {\n                console.log('Somthing happened wrong');\n            }\n        }).catch(err => {console.log(err)});\n    }\n\n    getData(){\n        fetch(\"http://192.168.55.112/startowa/api/web/v1/mcf/index\", {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(res => res.json())\n        .then(\n            (result) => {\n\n                let ret = []\n                let data = result.map((item) => {\n                    return {currency: item.currency_id, amount: item.amount};\n                });\n\n                data.forEach( function( value ) {\n                    ret[value.currency] = value;\n                });\n\n                this.setState({items: ret})\n            },\n            (error) => {\n                console.log(error)\n            }\n        )\n    }\n\n    getNbpRates(){\n        fetch(\"http://api.nbp.pl/api/exchangerates/rates/a/usd/\", {\n            method: 'GET',\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json',\n            }\n        }).then(res => res.json())\n        .then(\n            (result) => {\n                let rates = this.state.rates;\n                rates['usd'] = result.rates[0].mid\n                this.setState({rates: rates})\n                console.log(result);\n            },\n            (error) => {\n                console.log(error)\n            }\n        )\n    }\n}\n\nexport default App;",["32","33"],"/srv/my-crypto-flow/src/components/AddForm/AddForm.js",["34","35"],"/srv/my-crypto-flow/src/index.js",[],["36","37"],"/srv/my-crypto-flow/src/components/CurrencyList/CurrencyList.js",["38"],"import React from 'react';\nimport { Table } from 'react-bootstrap'\nimport CoinGeko from '../../dataProviders/CoinGeko';\n\nimport './CurrencyList.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\nclass CurrencyList extends React.Component {\n\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            items: props.items,\n            rates: props.rates,\n            sumUSD: 0\n        }\n\n        this.watchForChanges()\n        setInterval(() => {\n            this.watchForChanges()\n        }, 30 * 1000);\n\n        this.createRows = this.createRows.bind(this);\n        this.watchForChanges = this.watchForChanges.bind(this);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        return {\n            items: props.items,\n            rates: props.rates\n        };\n    }\n\n    render() {\n        return (\n            <div>\n\n                <Accordion>\n                    <Card>\n                        <Card.Header>\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                                Podsumowanie\n                            </Accordion.Toggle>\n                        </Card.Header>\n                            <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                            <Table striped bordered hover>\n                                <thead>\n                                    <tr>\n                                        <th>Suma USD</th>\n                                        <th>Suma PLN</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>\n                                        <td>${this.state.sumUSD.toFixed(2)}</td>\n                                        <td>{(this.state.sumUSD.toFixed(2) * this.state.rates['usd']).toFixed(2)} zł</td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                </Accordion>\n\n                <br></br>\n\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Nazwa</th>\n                            <th>Posiadana ilość</th>\n                            <th>Cena USD</th>\n                            <th>Cena PLN</th>\n                            <th>Wartość USD</th>\n                            <th>Wartość PLN</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.createRows()}\n                    </tbody>\n                </Table>\n            </div>\n        );\n    }\n\n    watchForChanges(){\n        CoinGeko.getDetails(this.state.items).then((res) => {\n\n            let sum = 0;\n            let items = this.state.items\n\n            Object.keys(res).forEach((name) => {\n                if(typeof items[name] != 'undefined'){\n                    items[name]['currency'] = res[name].name\n                    items[name]['price'] = res[name].price\n                }\n            })\n\n            Object.keys(this.state.items).forEach((sumItem) => {\n                let model = this.state.items[sumItem]\n                sum += parseFloat((model.amount != null && model.price != null) ? model.amount * model.price : 0)\n            })\n\n            this.setState({items: items});\n            this.setState({sumUSD: sum});\n        });\n    }\n\n    createRows() {\n        let array = []\n        Object.keys(this.state.items).forEach((element) => {\n            let model = this.state.items[element]\n            let rate = (model.price != null) ? model.price : 0\n            let sum = (model.amount != null && model.price != null) ? model.amount * model.price : 0\n            array.push(<tr>\n                <td>{model.currency}</td>\n                <td>{model.amount}</td>\n                <td>${rate}</td>\n                <td>{(rate * this.state.rates['usd']).toFixed(2)} zł</td>\n                <td>${sum.toFixed(2)}</td>\n                <td>{(sum * this.state.rates['usd']).toFixed(2)} zł</td>\n            </tr>)\n        })\n        return array;\n    }\n}\n\nexport default CurrencyList;","/srv/my-crypto-flow/src/dataProviders/CoinGeko.js",["39"],"class CoinGeko {\n\n    ping() {\n        fetch(\"https://api.coingecko.com/api/v3/ping\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log(result);\n                },\n                (error) => {\n                    console.log(error);\n                }\n            )\n    }\n\n    getCurrencies() {\n        return new Promise((resolve, reject) => {\n            fetch(\"https://api.coingecko.com/api/v3/coins/list\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n\n                    let ret = result.filter((model) => {\n                        return !model.name.includes('X');\n                    }).map((model) => {\n                        return {value: model.id, label: model.name}\n                    });\n\n                    resolve(ret)\n                },\n                (error) => {\n                    console.log(error);\n                    reject(error)\n                }\n            )\n        })\n    }\n\n    getDetails(items){\n        return new Promise((resolve, reject) => {\n\n            let ids = Object.keys(items)\n\n            let data = {\n                vs_currency: 'usd',\n                ids: ids.join(','),\n                price_change_percentage: '1h,24h,7d' \n            }\n\n            data = Object.entries(data).map(pair => pair.map(encodeURIComponent).join('=')).join('&');\n\n            fetch(\"https://api.coingecko.com/api/v3/coins/markets\" + \"?\" + data)\n                .then(res => res.json())\n                .then((result) => {\n                    let ret = []\n                    console.log(result)\n                    let mapped = result.map((item) => {\n                        return {id: item.id, name: item.name, price: item.current_price}\n                    })\n                    mapped.forEach( function( value ) {\n                        ret[value.id] = value;\n                    });\n                    resolve(ret)\n                }, (error) => {\n                    console.log(error);\n                    reject(error)\n                    }\n                )\n\n        })\n    }\n\n}\n\nexport default new CoinGeko();",{"ruleId":"40","severity":1,"message":"41","line":1,"column":17,"nodeType":"42","messageId":"43","endLine":1,"endColumn":25},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"40","severity":1,"message":"41","line":1,"column":17,"nodeType":"42","messageId":"43","endLine":1,"endColumn":25},{"ruleId":"40","severity":1,"message":"48","line":10,"column":7,"nodeType":"42","messageId":"43","endLine":10,"endColumn":9},{"ruleId":"44","replacedBy":"49"},{"ruleId":"46","replacedBy":"50"},{"ruleId":"40","severity":1,"message":"51","line":6,"column":8,"nodeType":"42","messageId":"43","endLine":6,"endColumn":17},{"ruleId":"52","severity":1,"message":"53","line":52,"column":68,"nodeType":"54","messageId":"55","endLine":52,"endColumn":69},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-native-reassign",["56"],"no-negated-in-lhs",["57"],"'fs' is assigned a value but never used.",["56"],["57"],"'Jumbotron' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation"]